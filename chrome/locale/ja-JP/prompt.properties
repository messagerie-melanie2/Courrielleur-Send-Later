# -*- coding: utf-8 -*-
sendaround=送信予定日時
entervalid=適切な日時を入力してください
sendwithfunction=関数 “%1$S” によって送信
sendspecifyfunction=上記メニューから関数を選択
January=1月
February=2月
March=3月
April=4月
May=5月
June=6月
July=7月
August=8月
September=9月
October=10月
November=11月
December=12月
OptionShortcutAlertTitle=無効なショートカット値
OptionShortcutAlertText=ショートカット %1$S には無効な値 “%2$S” が含まれています
SendingUnsentError=Send Later: 未送信のメッセージを送信する際にエラーが発生しました。[送信トレイ] が破損しているため、予定していたメッセージを送信できなかった可能性があります。https://blog.kamens.us/send-later/#outbox を参照してください。
CopyUnsentError=Send Later: 送信予定のメッセージを [送信トレイ] へコピーする際に、エラーが発生しました (コード %x)。Send Later は機能を停止しています！https://blog.kamens.us/send-later/#outbox-copy-failure を参照してください。
CopyRecurError=Send Later: 定期的なメッセージを [下書き] フォルダへコピーする際に、エラーが発生しました (コード %x)。Send Later は機能を停止しています！https://blog.kamens.us/send-later/#drafts-copy-failure を参照してください。
CorruptFolderError=Send Later: フォルダ %S は壊れている可能性があります。プロパティを開き、修復してください。https://blog.kamens.us/send-later/#corrupt-drafts-error を参照してください。
MessageResendError=Send Later: すでに送信済みのメッセージを再送信しようとしていませんか？！ [送信トレイ] か [下書き] フォルダ %S が壊れている可能性があります。修復するには https://blog.kamens.us/send-later/#corrupt-outbox を参照してください。
minutely=毎分
daily=毎日
weekly=毎週
monthly=毎月
yearly=毎年
plural_minutely=分ごとに
plural_daily=日ごとに
plural_weekly=週ごとに
plural_monthly=か月ごとに
plural_yearly=年ごとに
every_minutely=%S 分ごとに
every_daily=%S 日ごとに
every_weekly=%S 週ごとに
every_monthly=%S か月ごとに
every_yearly=%S 年ごとに
everyempty=週を考慮した曜日指定
everymonthly=今月の %1$S %2$S
everymonthly_short=%1$S %2$S
betw_times=%S:%S ～ %S:%S
only_on_days=%S
day0=日曜日
day1=月曜日
day2=火曜日
day3=水曜日
day4=木曜日
day5=金曜日
day6=土曜日
ord1=第1
ord2=第2
ord3=第3
ord4=第4
ord5=第5
draftSaveWarning=警告: 送信予定日時はキャンセルしておいてください。Send Later が誤って編集中のメッセージを送信してしまう可能性があります。編集を終えた段階でもう一度予定を設定してください。
AreYouSure=本当によろしいですか？
OutboxConfirmMessage=「[送信トレイ] に置く」をクリックすると、メッセージはすぐに [送信トレイ] に置かれます。これは特定の日時にメッセージを送信するものではありません。もし、そうしたい場合には、適切な送信日時を入力し、緑色のボックス内の「送信予定日時」をクリックしてください。本当に今すぐ [送信トレイ] にメッセージを置いてもよろしいですか？
SendNowConfirmMessage=「今すぐ送信」をクリックし、すぐにメッセージを送信します。これは、メッセージが特定の時間に送信されるようにスケジュールを設定しません。もし、そうしたい場合には、適切な送信日時を入力し、緑色のボックス内の「送信予定日時」をクリックしてください。本当に今すぐメッセージを送信してもよろしいですか？
ConfirmAgain=次回もこの警告を表示する
ScheduledMessagesWarningTitle=送信予定のメッセージがあります
ScheduledMessagesWarningQuitRequested=送信予定のメッセージがあります。Send Later は %S が起動しているときのみ、メッセージを送信することができます。終了してもよろしいですか？
ScheduledMessagesWarningQuit=Send Later は %S が起動しているときのみ、メッセージを送信することができます。送信予定日時までに再起動するのを忘れないでください！
EnigmailIncompatTitle=Send Later / Enigmail の互換性の問題
EnigmailIncompatText=インストールされている Enigmail は Send Later と互換性がありません。Send Later でスケジュールされたメッセージは無効化されています。Send Later の開発者(jik@kamens.us) に連絡してください。
TimeMismatchConfirmTitle=送信時間 / 条件の不一致
TimeMismatchConfirmBody=送信時刻 %1$S は、指定された時間条件収まっていません。送信時刻または条件を編集するには [キャンセル] をクリックするか、[OK] をクリックして %2$S に自動的に調整します。
endTimeWarningTitle=無効なメッセージ時間条件
endTimeWarningBody=メッセージ時間条件を指定する場合は、終了時刻が開始時刻より前にすることはできません。時間条件を調整するか無効にしてください。
missingDaysWarningTitle=無効な曜日条件
missingDaysWarningBody=任意の日を指定せずにメッセージ曜日条件を有効にしています。曜日条件を無効にするか、少なくとも一つの配送日を指定してください。
InvalidArgsTitle=無効な関数の引数
InvalidArgsBody=関数の引数が正しくありません。JavaScript のリストは角括弧で囲まずに指定してください。
BlockedLateMessage=下書きフォルダ %2$S の件名 “%1$S” のメッセージは、 %3$S 分よりも前に配送されるようにスケジュールされたため、配送がブロックされました。下書きメッセージを編集し、手動もしくは再スケジュールして送るようにしてください。
EditorReadMeHelp=メニュー内の関数の名前にカーソルを合わせると、ここに置かれた任意のテキストがツールチップとして表示されます。その関数が何をするのか、何の引数をとるのかのドキュメントとして使います。
_BusinessHoursCode=// Defaults\nvar workDays = [1, 2, 3, 4, 5]; // Mon - Fri; Sun == 0, Sat == 6\nvar workStart = [8, 30]; // Start of the work day as [H, M]\nvar workEnd = [17, 30]; // End of the work day as [H, M]\nif (args && args[0])\n    workDays = args[0];\nif (args && args[1])\n    workStart = args[1];\nif (args && args[2])\n    workEnd = args[2];\nif (prev)\n    // Not expected in normal usage, but used as the current time for testing.\n    next = new Date(prev);\nelse\n    next = new Date();\n// If we're past the end of the workday or not on a workday, move to the work\n// start time on the next day.\nwhile ((next.getHours() > workEnd[0]) ||\n       (next.getHours() == workEnd[0] && next.getMinutes() > workEnd[1]) ||\n       (workDays.indexOf(next.getDay()) == -1)) {\n    next.setDate(next.getDate() + 1);\n    next.setHours(workStart[0]);\n    next.setMinutes(workStart[1]);\n}\n// If we're before the beginning of the workday, move to its start time.\nif ((next.getHours() < workStart[0]) ||\n    (next.getHours() == workStart[0] && next.getMinutes() < workStart[1])) {\n    next.setHours(workStart[0]);\n    next.setMinutes(workStart[1]);\n}
BusinessHoursHelp=営業時間内か、または次の営業日の営業時間内であればすぐにメッセージを送信します。 第一引数 (デフォルトは月～金) として、0 は日曜日、6 が土曜日で営業日の数字の配列で渡すことによって、営業日の定義を変更することができます。第二または第三引数として [H, M] の配列を渡すことで、営業開始時刻や営業終了時刻 (デフォルトは 8:30～17:30) を変更できます。 “null” を指定すると、引数の値は変更されません。例えば、“null, [9, 0], [17, 0]” は、営業日を変更せずに、営業時間を変更します。
DaysInARowCode=// Send the first message now, subsequent messages once per day.\nif (! prev)\n    next = new Date();\nelse {\n    var now = new Date();\n    next = new Date(prev); // Copy date argument so we don't modify it.\n    do {\n        next.setDate(next.getDate() + 1);\n    } while (next < now);\n    // ^^^ Don't try to send in the past, in case Thunderbird was asleep at\n    // the scheduled send time.\n}\nif (! args) // Send messages three times by default.\n    args = [3];\nnextargs = [args[0] - 1];\n// Recur if we haven't done enough sends yet.\nif (nextargs[0] > 0)\n    nextspec = "function " + specname;
DaysInARowHelp=今すぐメッセージを送信します。そのあとに、三回送信されるまで、毎日同じ時刻に送信します。送信の総数を変更するには、引数として数を指定します
DiscardConfirmTitle=変更を破棄しますか？
DiscardConfirmBody=保存していない変更があります。これらを破棄してもよろしいですか？
UntestedSaveTitle=テストしていない関数を保存しますか？
UntestedSaveBody=この関数は変更されてから、(“実行” ボタンによる) テストが済んでいません。本当に保存もしくはエクスポートしてもよろしいですか？
BadSaveTitle=無効な関数名またはコード
BadSaveBody=関数名とコードを保存またはエクスポートする前に、有効であることを確認してください。
ReplacingFunctionTitle=既存の関数を上書きしますか？
ReplacingFunctionBody=指定された名前の関数がすでに存在ます。本当に置き換えてもよろしいですか？
NoNextValueError=関数は、 「次回」の値を設定しませんでした。
BadNextValueError=「次回」の値 “%1$S” が数値もしくは日付ではありません。
BadNextArgsError=次の引数の値 “%1$S” が配列ではありません。
FunctionDeleteConfirmBody=この関数を削除してもよろしいですか？ショートカットボタンに関連付けられている場合、動かなくなります。定期的なメッセージがある場合、次回以降の再スケジュールに失敗します。
ImportTitle=インポートするファイルを選択してしてください
SLJFilterLabel=Send Later JSON ファイル
ImportError=インポートエラー
ExportTitle=エクスポート先を選択してください。
RenameFunctionTitle=存在するファンクションの名前を変更しますか？
RenameFunctionBody=既存の関数の名前 “%1$S” を修正しました。既存の関数の名前を変更するか、新しい名前で別の関数として保存しますか？
RenameFunctionRenameButton=名前変更
RenameFunctionNewButton=新規作成
FunctionErrorTitle=ユーザー関数の呼び出しエラー
FunctionErrorBody=ユーザー関数の呼び出し時にエラーが発生しました: “%1$S”
cancel_on_reply=返信を受信したらキャンセルする
EditorReadMeCode=// Welcome to the Send Later function editor!\n//\n// The editor allows you to create JavaScript functions implementing complex\n// message scheduling logic which can be associated with shortcut buttons or\n// selected in the Send Later dialog.\n//\n// As you can see above, when a scheduling function is called, it will be given\n// three arguments:\n// * "specname" is needed if you want this function to recur (see below)\n// * "prev" is the previous scheduled send time, if this is a recurring\n//   invocation\n// * "args" is the extra arguments returned by the previous invocation if this\n//   is a recurring invocation\n//\n// Your code needs to set the variables "next", "nextspec", and\n// "nextargs" as follows:\n//\n// * "next" is either the number of minutes in the future or a Date object\n//   indicating when the message should be sent.\n// * "nextspec" is a recurrence specification if this is intended to be a\n//   recurring message (see\n//   https://blog.kamens.us/send-later/#dynamic-recurrence). If you don't set\n//   this, then the message will only be sent once. Note: if you want your\n//   function to be called again for recurrence, do:\n//     nextspec = "function " + specname;\n// * "nextargs" is an array of arguments you want to be passed into the next\n//   invocation of the function as "args".\n//\n// While you are working on your function, you can test it by filling in values\n// for "prev" and "args" in the Text boxes below and then clicking "Execute" to\n// execute the function and see the results.\n//\n// There are two pre-configured sample functions, "BusinessHours" and\n// "DaysInARow", which you can look at and play with to learn more.\n//\n// This "ReadMeFirst" function just causes the message to be sent around now,\n// via the following line.\nnext = new Date();
